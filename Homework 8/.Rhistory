library(ggplot2)
library(cluster)
knitr::opts_chunk$set(echo = TRUE)
GHOData <- read.table("whs2018_AnnexB-subset-wo-NAs.txt", sep="\t", header=TRUE)
GHOData <- read.table("whs2018_AnnexB-subset-wo-NAs.txt", sep="\t", header=TRUE)
chori=numeric(20)
for ( k in 2:20 ) {
kf=kmeans(scale(GHOData),k,nstart=10)
chori[k] = (kf$betweenss/(k-1)) / (kf$tot.withinss/(nrow(GHOData)-k))
}
plot(2:20,chori[-1],type="b", lwd=2,pch=19,xlab="K", ylab="CH index",xlim=c(1,20),ylim=range(chori[-1])*c(1/2,1))
for ( i in 1:10 ) {
chrnd = numeric()
chsmpl = numeric()
for ( k in 2:20 ) {
krnd = kmeans(apply(scale(GHOData),2,function(x)runif(length(x),min(x),max(x))),k,nstart=10)
chrnd[k] = (krnd$betweenss/(k-1)) / (krnd$tot.withinss/(nrow(GHOData)-k))
ksmpl = kmeans(apply(scale(GHOData),2,sample),k,nstart=10)
chsmpl[k] = (ksmpl$betweenss/(k-1)) / (ksmpl$tot.withinss/(nrow(GHOData)-k))
}
points(2:20,chrnd[-1],type="l",col="red")
points(2:20,chsmpl[-1],type="l",col="blue")
}
GHOData <- read.table("whs2018_AnnexB-subset-wo-NAs.txt", sep="\t", header=TRUE)
chori=numeric(20)
for ( k in 2:20 ) {
kf=kmeans(scale(GHOData),k,nstart=30)
chori[k] = (kf$betweenss/(k-1)) / (kf$tot.withinss/(nrow(GHOData)-k))
}
plot(2:20,chori[-1],type="b", lwd=2,pch=19,xlab="K", ylab="CH index",xlim=c(1,20),ylim=range(chori[-1])*c(1/2,1))
for ( i in 1:10 ) {
chrnd = numeric()
chsmpl = numeric()
for ( k in 2:20 ) {
krnd = kmeans(apply(scale(GHOData),2,function(x)runif(length(x),min(x),max(x))),k,nstart=30)
chrnd[k] = (krnd$betweenss/(k-1)) / (krnd$tot.withinss/(nrow(GHOData)-k))
ksmpl = kmeans(apply(scale(GHOData),2,sample),k,nstart=30)
chsmpl[k] = (ksmpl$betweenss/(k-1)) / (ksmpl$tot.withinss/(nrow(GHOData)-k))
}
points(2:20,chrnd[-1],type="l",col="red")
points(2:20,chsmpl[-1],type="l",col="blue")
}
library(ggplot2)
library(cluster)
knitr::opts_chunk$set(echo = TRUE)
?clusGap
lw.unif <- function(m,K,N=20,...) { w <- numeric(N)
for ( i in 1:N ) {
m.new <- apply(m,2,function(x) { runif(length(x),min=min(x),max=max(x))
})
# ellipsis allows the caller
# to pass through any additional arguments: w[i] <- kmeans(m.new,K,...)$tot.withinss
}
return( list(LW=mean(log(w)),SE=sd(log(w))*sqrt(1+1/N)) ) }
gap <- numeric(20)
se <- numeric(20)
for ( k in 1:20 ) {
kf <- kmeans(cbind(x,y),k,nstart=100) sim <- lw.unif(cbind(x,y),k,nstart=100) gap[k] = sim$LW - log(kf$tot.withinss) se[k] = sim$SE
lw.unif <- function(m,K,N=20,...) { w <- numeric(N)
for ( i in 1:N ) {
m.new <- apply(m,2,function(x) { runif(length(x),min=min(x),max=max(x))
})
# ellipsis allows the caller
# to pass through any additional arguments: w[i] <- kmeans(m.new,K,...)$tot.withinss
}
return( list(LW=mean(log(w)),SE=sd(log(w))*sqrt(1+1/N)) ) }
gap <- numeric(20)
se <- numeric(20)
for ( k in 1:20 ) {
kf <- kmeans(cbind(x,y),k,nstart=100)
sim <- lw.unif(cbind(x,y),k,nstart=100)
gap[k] = sim$LW - log(kf$tot.withinss)
se[k] = sim$SE
}
lw.unif <- function(m,K,N=20,...) { w <- numeric(N)
for ( i in 1:N ) {
m.new <- apply(m,2,function(x) { runif(length(x),min=min(x),max=max(x))
})
# ellipsis allows the caller
# to pass through any additional arguments: w[i] <- kmeans(m.new,K,...)$tot.withinss
}
return( list(LW=mean(log(w)),SE=sd(log(w))*sqrt(1+1/N)) ) }
gap <- numeric(20)
se <- numeric(20)
for ( k in 1:20 ) {
kf <- kmeans(scale(GHOData),k,nstart=100)
sim <- lw.unif(scale(GHOData),k,nstart=100)
gap[k] = sim$LW - log(kf$tot.withinss)
se[k] = sim$SE
}
plot(1:20, gap, pch=19, type="b") arrows(1:20, gap-se, 1:20, gap+se,
lw.unif <- function(m,K,N=20,...) { w <- numeric(N)
for ( i in 1:N ) {
m.new <- apply(m,2,function(x) { runif(length(x),min=min(x),max=max(x))
})
# ellipsis allows the caller
# to pass through any additional arguments: w[i] <- kmeans(m.new,K,...)$tot.withinss
}
return( list(LW=mean(log(w)),SE=sd(log(w))*sqrt(1+1/N)) ) }
gap <- numeric(20)
se <- numeric(20)
for ( k in 1:20 ) {
kf <- kmeans(scale(GHOData),k,nstart=100)
sim <- lw.unif(scale(GHOData),k,nstart=100)
gap[k] = sim$LW - log(kf$tot.withinss)
se[k] = sim$SE
}
plot(1:20, gap, pch=19, type="b")
lw.unif <- function(m,K,N=20,...) { w <- numeric(N)
for ( i in 1:N ) {
m.new <- apply(m,2,function(x) { runif(length(x),min=min(x),max=max(x))
})
# ellipsis allows the caller
# to pass through any additional arguments: w[i] <- kmeans(m.new,K,...)$tot.withinss
}
return( list(LW=mean(log(w)),SE=sd(log(w))*sqrt(1+1/N)) ) }
gap <- numeric(20)
se <- numeric(20)
for ( k in 1:20 ) {
kf <- kmeans(scale(GHOData),k,nstart=100)
sim <- lw.unif(scale(GHOData),k,nstart=100)
gap[k] = sim$LW - log(kf$tot.withinss)
se[k] = sim$SE
}
plot(1:20, gap, pch=19, type="b", ylim=1)
ylim
?ylim
?plot
lw.unif <- function(m,K,N=20,...) { w <- numeric(N)
for ( i in 1:N ) {
m.new <- apply(m,2,function(x) { runif(length(x),min=min(x),max=max(x))
})
# ellipsis allows the caller
# to pass through any additional arguments: w[i] <- kmeans(m.new,K,...)$tot.withinss
}
return( list(LW=mean(log(w)),SE=sd(log(w))*sqrt(1+1/N)) ) }
gap <- numeric(20)
se <- numeric(20)
for ( k in 1:20 ) {
kf <- kmeans(scale(GHOData),k,nstart=100)
sim <- lw.unif(scale(GHOData),k,nstart=100)
gap[k] = sim$LW - log(kf$tot.withinss)
se[k] = sim$SE
}
plot(1:20, gap, pch=19, type="b")
lw.unif <- function(m,K,N=20,...) { w <- numeric(N)
for ( i in 1:N ) {
m.new <- apply(m,2,function(x) { runif(length(x),min=min(x),max=max(x))
})
# ellipsis allows the caller
# to pass through any additional arguments: w[i] <- kmeans(m.new,K,...)$tot.withinss
}
return( list(LW=mean(log(w)),SE=sd(log(w))*sqrt(1+1/N)) ) }
gap <- numeric(20)
se <- numeric(20)
for ( k in 1:20 ) {
kf <- kmeans(scale(GHOData),k,nstart=100)
sim <- lw.unif(scale(GHOData),k,nstart=100)
gap[k] = sim$LW - log(kf$tot.withinss)
se[k] = sim$SE
}
# plot(1:20, gap, pch=19, type="b")
# arrows(1:20, gap-se, 1:20, gap+se, length=0.05, angle=90, code=3)
gapGHO <- clusGap(scale(GHOData), kmeans, 20, d.power=2)
plot(gapGHO)
plot(gapGHO)
gapGHO <- clusGap(scale(GHOData), kmeans, 20, d.power=2)
plot(gapGHO)
min(which(gap[-length(gap)]>=(gap-se)[-1]))
gapGHO <- clusGap(scale(GHOData), kmeans, 20, d.power=2)
plot(gapGHO)
